#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализацияОбъектовМетаданных()
	
	СписокОбъектов = Новый СписокЗначений();
	// _Демо начало примера
	СписокОбъектов.Добавить(Метаданные.Справочники._ДемоНоменклатура.ПолноеИмя(),Метаданные.Справочники._ДемоНоменклатура.Представление(),,БиблиотекаКартинок.Справочник);
	СписокОбъектов.Добавить(Метаданные.Справочники._ДемоСклады.ПолноеИмя(),Метаданные.Справочники._ДемоСклады.Представление(),,БиблиотекаКартинок.Справочник);
	СписокОбъектов.Добавить(Метаданные.Справочники._ДемоПартнеры.ПолноеИмя(),Метаданные.Справочники._ДемоПартнеры.Представление(),,БиблиотекаКартинок.Справочник);
	СписокОбъектов.Добавить(Метаданные.Документы._ДемоЗаказыПокупателя.ПолноеИмя(),Метаданные.Документы._ДемоЗаказыПокупателя.Представление(),,БиблиотекаКартинок.Документ);
	// _Демо конец примера
	
	Возврат СписокОбъектов;
	
КонецФункции //ИнициализацияОбъектовМетаданных

// Формирует список возможных типов конфигурации.
//
// Параметры:
//	СписокДобавленныхТипов - список типов, добавленных "вручную".
//
Функция СформироватьСписокТипов(СписокДобавленныхТипов = Неопределено) Экспорт
	МассивТипов = ДоступныеТипыДанных.Типы();
	
	НеПримитивныеТипы = Новый СписокЗначений;
	НеПримитивныеТипы.ЗагрузитьЗначения(МассивТипов);
	НеПримитивныеТипы.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("Строка", НСтр("ru = 'Строка'"));
	СписокТипов.Добавить("Число", НСтр("ru = 'Число'"));
	СписокТипов.Добавить("Дата", НСтр("ru = 'Дата'"));
	СписокТипов.Добавить("Булево", НСтр("ru = 'Булево'"));
	СписокТипов.Добавить("Граница", НСтр("ru = 'Граница'"));
	СписокТипов.Добавить("МоментВремени", НСтр("ru = 'Момент времени'"));
	СписокТипов.Добавить("СписокЗначений", НСтр("ru = 'Список значений'"));
	СписокТипов.Добавить("ТаблицаЗначений", НСтр("ru = 'Таблица значений'"));
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	СписокДобавленныхТипов = СписокТипов.Скопировать();
	
	Для каждого Стр Из НеПримитивныеТипы Цикл
		ЗначениеТипа 		= XMLТип(Стр.Значение).ИмяТипа;
		ПредставлениеТипа 	= Строка(Стр.Значение);
		СписокТипов.Добавить(ЗначениеТипа, ПредставлениеТипа);
	КонецЦикла;
	
	Возврат СписокТипов;
КонецФункции	

// Возвращает строковое представление типа по значению.
//
// Параметры:
//	Значение - передаваемое значение.
//
Функция ИмяТипаИзЗначения(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 	
		ИмяТипа = "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда 	
		ИмяТипа = "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда 		
		ИмяТипа = "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда 		
		ИмяТипа = "МоментВремени";	
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда 		
		ИмяТипа = "Строка";		
	Иначе	
		ИмяТипа = xmlТип(ТипЗнч(Значение)).ИмяТипа;
	КонецЕсли;	
	
	Возврат ИмяТипа;
КонецФункции	

// Возвращает представление значения.
//
// Параметры:
//	Значение - передаваемое значение.
//
Функция ФормированиеПредставленияЗначения(Значение) Экспорт
	ВозврЗнач = "";
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда 
		ИтоговаяСтрока = "Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%";
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоСтрок%", Строка(Значение.Количество()));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоКолонок%", Строка(Значение.Колонки.Количество()));
		ВозврЗнач = ИтоговаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда 
		ВозврЗнач = Строка(Значение.Дата) + "; " + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип("Граница") Тогда 
		ВозврЗнач = Строка(Значение.Значение) + "; " + Строка(Значение.ВидГраницы);
	КонецЕсли;	
	
	Возврат ВозврЗнач;
КонецФункции	

// Фильтрует список типов для данного контекста.
//
// Параметры:
//	СписокТипов - список значений передаваемых типов.
//  Контекст - передаваемый контекст в виде строки.
//
Процедура ФильтрацияСпискаТипов(СписокТипов, Контекст) Экспорт
	Если нРег(Контекст) = "граница" Тогда 
		Элемент = СписокТипов.НайтиПоЗначению("СписокЗначений");
		СписокТипов.Удалить(Элемент);
		Элемент = СписокТипов.НайтиПоЗначению("ТаблицаЗначений");
		СписокТипов.Удалить(Элемент);
		Элемент = СписокТипов.НайтиПоЗначению("Граница");
		СписокТипов.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = СписокТипов.НайтиПоЗначению("TypeDescription"); // Тип "Описание типов" удаляется всегда.
	СписокТипов.Удалить(Элемент);
КонецПроцедуры	

// Проверяет является ли тип ссылкой.
//
// Параметры:
//	Тип - передаваемый тип.
//
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции


#КонецОбласти

#Область КонструкторОбъекта

// инициализация объекта по умолчанию
ОбъектыМетаданных =  ИнициализацияОбъектовМетаданных();

#КонецОбласти 

#КонецЕсли


